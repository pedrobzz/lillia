/* eslint-disable @typescript-eslint/no-misused-promises */
import { useEffect, useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";

import { api, type RouterOutputs } from "~/utils/api";

const Recorder: React.FC = () => {
  const [stream, setStream] = useState<MediaStream | null>(null);
  const [recorder, setRecorder] = useState<MediaRecorder | null>(null);
  const [audioUrl, setAudioUrl] = useState<string | null>(null);
  const [isRecording, setIsRecording] = useState(false);

  const utils = api.useContext();
  const { mutate: handleAudioPrompt } =
    api.openAi.handleAudioPrompt.useMutation({
      onSettled: () => utils.post.all.invalidate(),
    });

  useEffect(() => {
    // Request access to user's microphone when the component mounts
    navigator.mediaDevices
      .getUserMedia({ audio: true })
      .then((stream) => {
        setStream(stream);
        const recorder = new MediaRecorder(stream);
        setRecorder(recorder);

        recorder.addEventListener("dataavailable", handleDataAvailable);
      })
      .catch((err) => console.error(err));

    return () => {
      // Remove event listener and stop recording when the component unmounts
      if (recorder) {
        recorder.removeEventListener("dataavailable", handleDataAvailable);
        if (isRecording) recorder.stop();
      }
      if (isRecording) {
        setIsRecording(false);
        setAudioUrl(null);
      }
    };
  }, []);

  const handleStartRecording = () => {
    if (!recorder) return;
    recorder.start();
    setIsRecording(true);
  };

  const handleStopRecording = () => {
    if (!recorder) return;
    recorder.stop();
    setIsRecording(false);
  };

  const handleDataAvailable = async (e: BlobEvent) => {
    const url = URL.createObjectURL(e.data);
    setAudioUrl(url);
    const binaryData = await e.data.arrayBuffer();
    const base64Data = Buffer.from(binaryData).toString("base64");
    handleAudioPrompt({ prompt: base64Data });
  };

  const handleDownload = () => {
    if (!audioUrl) return;
    const link = document.createElement("a");
    link.href = audioUrl;
    link.download = "recording.wav";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className="flex items-center justify-center gap-2 ">
      <button
        onClick={handleStartRecording}
        disabled={isRecording}
        className="rounded bg-blue-500 py-2 px-4 font-bold text-white hover:bg-blue-700 disabled:opacity-50"
      >
        Record
      </button>
      <button
        onClick={handleStopRecording}
        disabled={!isRecording}
        className="rounded bg-red-500 py-2 px-4 font-bold text-white hover:bg-red-700 disabled:opacity-50"
      >
        Stop
      </button>
      <button
        onClick={handleDownload}
        disabled={!audioUrl}
        className="rounded bg-green-500 py-2 px-4 font-bold text-white hover:bg-green-700 disabled:opacity-50"
      >
        Download
      </button>
    </div>
  );
};

const PostCard: React.FC<{
  post: RouterOutputs["post"]["all"][number];
  onPostDelete?: () => void;
}> = ({ post, onPostDelete }) => {
  return (
    <div className="flex flex-row rounded-lg bg-white/10 p-4 transition-all hover:scale-[101%]">
      <div className="flex-grow">
        <h2 className="text-2xl font-bold text-pink-400">{post.title}</h2>
        <p className="mt-2 text-sm">{post.content}</p>
      </div>
      <div>
        <span
          className="cursor-pointer text-sm font-bold uppercase text-pink-400"
          onClick={onPostDelete}
        >
          Delete
        </span>
      </div>
    </div>
  );
};

const Home: NextPage = () => {
  const [prompt, setPrompt] = useState("");
  const postQuery = api.post.all.useQuery();

  const deletePostMutation = api.post.delete.useMutation({
    onSettled: () => postQuery.refetch(),
  });

  const { mutateAsync: handlePrompt, isLoading: openAiLoading } =
    api.openAi.handlePrompt.useMutation();

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen flex-col items-center overflow-y-hidden bg-gradient-to-b from-[#2e026d] to-[#15162c] text-white">
        <h1 className="shrink-0 text-5xl font-extrabold tracking-tight sm:text-[5rem]">
          Lill<span className="text-pink-400">IA</span>
        </h1>
        <div className="container flex w-full grow flex-col items-center gap-4 overflow-y-auto px-4 py-8">
          <div className="my-4 flex gap-2">
            <input
              type="text"
              name="prompt"
              id=""
              onChange={(e) => setPrompt(e.target.value)}
              value={prompt}
              className="rounded p-1 text-black"
            />
            <button
              className="flex items-center gap-2 rounded bg-pink-400 p-2 font-bold disabled:opacity-50"
              disabled={openAiLoading}
              onClick={async () => {
                if (!prompt) return;
                const response = await handlePrompt({ prompt });
                console.log({ response, prompt });
                setPrompt("");
                await postQuery.refetch();
              }}
            >
              Send Prompt
              {openAiLoading && (
                <div className="h-4 w-4 animate-spin rounded-full border-b-2 border-white"></div>
              )}
            </button>
          </div>
          <div>
            <Recorder />
          </div>
          {postQuery.data ? (
            <div className="w-full max-w-2xl">
              {postQuery.data?.length === 0 ? (
                <span>There are no posts!</span>
              ) : (
                <div className="flex  justify-center overflow-y-auto px-4 text-2xl">
                  <div className="flex w-full flex-col gap-4">
                    {postQuery.data?.map((p) => {
                      return (
                        <PostCard
                          key={p.id}
                          post={p}
                          onPostDelete={() => deletePostMutation.mutate(p.id)}
                        />
                      );
                    })}
                  </div>
                </div>
              )}
            </div>
          ) : (
            <p>Loading...</p>
          )}
        </div>
      </main>
    </>
  );
};

export default Home;
